{"version":3,"sources":["utils.js","constants.js","pages/homePage.js","pages/Planet.js","App.js","reportWebVitals.js","index.js"],"names":["getIdFromUrl","url","urlWithoutLastSlash","slice","lastIndexOf","API_URL","HomePage","useState","data","setData","feathDataPlanets","a","axios","get","response","results","message","error","useEffect","justify","map","name","climate","population","to","className","Panel","Collapse","Planet","planetsId","useParams","fetchDataPlanets","id","span","rotation_period","diameter","gravity","terrain","defaultActiveKey","showArrow","header","residents","length","href","App","orientation","src","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yQAAaA,EAAe,SAAAC,GACxB,IAAMC,EAAsBD,EAAIE,MAAM,GAAI,GAC1C,OAAOD,EAAoBC,MAAMD,EAAoBE,YAAY,KAAO,ICF/DC,EAAU,wBC0CRC,EAnCE,WAAO,IAAD,EAEKC,mBAAS,IAFd,mBAEZC,EAFY,KAENC,EAFM,KAIbC,EAAgB,uCAAG,4BAAAC,EAAA,+EAEMC,IAAMC,IAAN,UAAaR,EAAb,cAFN,OAEXS,EAFW,OAGjBL,EAAQK,EAASN,KAAKO,SAHL,gDAMjBC,IAAQC,MAAR,gCAAuC,KAAED,SAAW,GANnC,yDAAH,qDAYtB,OAHAE,qBAAU,WACNR,MACF,IAEE,cAAC,WAAD,UACI,cAAC,IAAD,CAAKS,QAAQ,eAAb,SACKX,GACGA,EAAKY,KAAI,gBAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WAAYtB,EAA7B,EAA6BA,IAA7B,OACL,cAAC,IAAD,CAAgBuB,GAAE,kBAAaxB,EAAaC,IAA5C,SACI,sBAAKwB,UAAU,gBAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,2CAAcC,KACd,8CAAiBC,SAJdtB,W,kBCtB3ByB,EAAUC,IAAVD,MAkDOE,EAhDA,WAAO,IAAD,EACOrB,mBAAS,MADhB,mBACVC,EADU,KACJC,EADI,KAEToB,EAAcC,cAAdD,UAEFE,EAAgB,uCAAG,WAAMC,GAAN,eAAArB,EAAA,+EAEMC,IAAMC,IAAN,UAAaR,EAAb,oBAAgC2B,EAAhC,MAFN,OAEXlB,EAFW,OAGjBL,EAAQK,EAASN,MAHA,gDAMjBQ,IAAQC,MAAR,gCAAuC,KAAED,SAAW,GANnC,yDAAH,sDAetB,OALAE,qBAAU,WACNa,EAAiBF,KAClB,CAACA,IAIA,cAAC,WAAD,UACKrB,GACG,cAAC,IAAD,CAAKW,QAAQ,SAAb,SACI,eAAC,IAAD,CAAKc,KAAM,GAAIR,UAAU,eAAzB,UACI,qBAAIA,UAAU,eAAd,oBAAqCjB,EAAKa,QAC1C,oDAAuBb,EAAK0B,mBAC5B,6CAAgB1B,EAAK2B,YACrB,4CAAe3B,EAAKc,WACpB,4CAAed,EAAK4B,WACpB,4CAAe5B,EAAK6B,WACpB,+CAAkB7B,EAAKe,cACvB,cAAC,IAAD,CAAUe,iBAAkB,CAAC,KAA7B,SACI,cAACZ,EAAD,CAAOa,WAAW,EAAOC,OAAO,YAAhC,SACKhC,EAAKiC,UAAUC,OAAS,EACrBlC,EAAKiC,UAAUrB,KAAI,SAAAnB,GAAG,OAAI,oBAAa0C,KAAM1C,EAAnB,cAAyB,4BAAIA,IAA7B,MAAQA,MAElC,2CAJwC,eCN7D2C,EArBH,WACV,OACE,eAAC,IAAD,WACI,cAAC,IAAD,CAASC,YAAY,OAArB,SACI,cAAC,IAAD,CAAMrB,GAAG,IAAT,SACI,qBAAKC,UAAU,OAAOqB,IAAI,0EAGlC,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,sBAAZ,SACI,cAAC,EAAD,MAGJ,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACI,cAAC,EAAD,aCfDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.58a38895.chunk.js","sourcesContent":["export const getIdFromUrl = url => {\n    const urlWithoutLastSlash = url.slice(0, -1)\n    return urlWithoutLastSlash.slice(urlWithoutLastSlash.lastIndexOf('/') + 1)\n}","export const API_URL = 'https://swapi.dev/api'","import React, {useState, useEffect, Fragment} from 'react';\nimport axios from 'axios';\nimport {Row, message} from 'antd';\nimport {Link} from \"react-router-dom\";\nimport {getIdFromUrl} from \"../utils\";\nimport {API_URL} from \"../constants\";\n\nconst HomePage = () => {\n\n    const [data, setData] = useState([])\n\n    const feathDataPlanets = async () =>{\n        try {\n            const response = await axios.get(`${API_URL}/planets/`)\n            setData(response.data.results)\n            // console.log(\"response.data\", response.data.results)\n        } catch (e) {\n            message.error(`Something went wrong: ${e.message}`, 5)\n        }\n    }\n    useEffect(() => {\n        feathDataPlanets()\n    },[])\n    return (\n        <Fragment>\n            <Row justify=\"space-around\">\n                {data && (\n                    data.map(({name, climate, population, url})=>\n                        <Link key={url} to={`planets/${getIdFromUrl(url)}`}>\n                            <div className=\"borderOfTitle\">\n                                <h2 className=\"colorOfTitle\">{name}</h2>\n                                <h3>Climate: {climate}</h3>\n                                <h3>Population: {population}</h3>\n                            </div>\n                        </Link>\n                    )\n                )}\n            </Row>\n        </Fragment>\n    )\n}\n\nexport default HomePage;","import React, {useState,  useEffect, Fragment} from 'react';\nimport axios from 'axios';\nimport {message, Row, Col, Collapse} from \"antd\";\nimport {API_URL} from \"../constants\";\nimport { useParams } from 'react-router-dom'\n\nconst { Panel } = Collapse;\n\nconst Planet = () => {\n    const [data, setData] = useState(null)\n    const { planetsId } = useParams();\n\n    const fetchDataPlanets = async id => {\n        try {\n            const response = await axios.get(`${API_URL}/planets/${id}/`)\n            setData(response.data)\n            // console.log(\"response.data\", response.data)\n        } catch (e) {\n            message.error(`Something went wrong: ${e.message}`, 5)\n        }\n    }\n\n    useEffect(() => {\n        fetchDataPlanets(planetsId)\n    }, [planetsId])\n\n\n    return(\n        <Fragment>\n            {data && (\n                <Row justify=\"center\">\n                    <Col span={18} className=\"coverForDate\">\n                        <h1 className=\"colorOfTitle\"> Name: {data.name}</h1>\n                        <h3> Rotation period: {data.rotation_period}</h3>\n                        <h3> Diameter: {data.diameter}</h3>\n                        <h3> Climate: {data.climate}</h3>\n                        <h3> Gravity: {data.gravity}</h3>\n                        <h3> Terrain: {data.terrain}</h3>\n                        <h3> Population: {data.population}</h3>\n                        <Collapse defaultActiveKey={['1']} >\n                            <Panel showArrow={false} header=\"Residents\" key=\"1\">\n                                {data.residents.length > 0 ? (\n                                    data.residents.map(url => <a key={url} href={url}> <p>{url}</p> </a>)\n                                ) :\n                                    <p>not found</p>\n                                }\n                            </Panel>\n                        </Collapse>\n                    </Col>\n                </Row>\n            )}\n        </Fragment>\n    )\n\n}\n\nexport default Planet;","import './App.css';\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport 'antd/dist/antd.css';\nimport {Divider} from 'antd'\nimport HomePage from \"./pages/homePage\";\nimport Planet from \"./pages/Planet\";\n\nconst App = () => {\n  return (\n    <Router>\n        <Divider orientation=\"left\">\n            <Link to=\"/\">\n                <img className=\"logo\" src=\"https://pngimg.com/uploads/star_wars_logo/star_wars_logo_PNG7.png\"/>\n            </Link>\n        </Divider>\n        <Switch>\n            <Route path=\"/planets/:planetsId\">\n                <Planet />\n            </Route>\n\n            <Route path=\"/\">\n                <HomePage />\n            </Route>\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}